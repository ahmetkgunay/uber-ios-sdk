///
/// @Generated by Mockolo
///



import AuthenticationServices
import Foundation
import UIKit
import UberCore
@testable import UberAuth


public class AuthProvidingMock: AuthProviding {
    public init() { }


    public private(set) var executeCallCount = 0
    public var executeHandler: ((AuthDestination, Prefill?, @escaping (Result<Client, UberAuthError>) -> ()) -> ())?
    public func execute(authDestination: AuthDestination, prefill: Prefill?, completion: @escaping (Result<Client, UberAuthError>) -> ())  {
        executeCallCount += 1
        if let executeHandler = executeHandler {
            executeHandler(authDestination, prefill, completion)
        }
        
    }

    public private(set) var handleCallCount = 0
    public var handleHandler: ((URL) -> (Bool))?
    public func handle(response url: URL) -> Bool {
        handleCallCount += 1
        if let handleHandler = handleHandler {
            return handleHandler(url)
        }
        return false
    }
}

class AuthManagingMock: AuthManaging {
    init() { }


    private(set) var loginCallCount = 0
    var loginHandler: ((AuthContext, @escaping AuthCompletion) -> ())?
    func login(context: AuthContext, completion: @escaping AuthCompletion)  {
        loginCallCount += 1
        if let loginHandler = loginHandler {
            loginHandler(context, completion)
        }
        
    }

    private(set) var handleCallCount = 0
    var handleHandler: ((URL) -> (Bool))?
    func handle(_ url: URL) -> Bool {
        handleCallCount += 1
        if let handleHandler = handleHandler {
            return handleHandler(url)
        }
        return false
    }
}

