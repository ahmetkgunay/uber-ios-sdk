///
/// @Generated by Mockolo
///



import AuthenticationServices
import Foundation
import UIKit
@testable import UberAuth
@testable import UberCore


class AuthorizationCodeResponseParsingMock: AuthorizationCodeResponseParsing {
    init() { }


    private(set) var isValidResponseCallCount = 0
    var isValidResponseHandler: ((URL, String) -> (Bool))?
    func isValidResponse(url: URL, matching redirectURI: String) -> Bool {
        isValidResponseCallCount += 1
        if let isValidResponseHandler = isValidResponseHandler {
            return isValidResponseHandler(url, redirectURI)
        }
        return false
    }

    private(set) var callAsFunctionCallCount = 0
    var callAsFunctionHandler: ((URL) -> (Result<Client, UberAuthError>))?
    func callAsFunction(url: URL) -> Result<Client, UberAuthError> {
        callAsFunctionCallCount += 1
        if let callAsFunctionHandler = callAsFunctionHandler {
            return callAsFunctionHandler(url)
        }
        fatalError("callAsFunctionHandler returns can't have a default value thus its handler must be set")
    }
}

class NetworkProvidingMock: NetworkProviding {
    init() { }


    private(set) var executeCallCount = 0
    var executeHandler: ((Any, Any) -> ())?
    func execute<R: NetworkRequest>(request: R, completion: @escaping (Result<R.Response, UberAuthError>) -> ())  {
        executeCallCount += 1
        if let executeHandler = executeHandler {
            executeHandler(request, completion)
        }
        
    }
}

class ApplicationLaunchingMock: ApplicationLaunching {
    init() { }


    private(set) var openCallCount = 0
    var openHandler: ((URL, [UIApplication.OpenExternalURLOptionsKey: Any], ((Bool) -> Void)?) -> ())?
    func open(_ url: URL, options: [UIApplication.OpenExternalURLOptionsKey: Any], completionHandler: ((Bool) -> Void)?)  {
        openCallCount += 1
        if let openHandler = openHandler {
            openHandler(url, options, completionHandler)
        }
        
    }
}

class ConfigurationProvidingMock: ConfigurationProviding {
    init() { }
    init(clientID: String? = nil, redirectURI: String? = nil) {
        self.clientID = clientID
        self.redirectURI = redirectURI
    }


    private(set) var clientIDSetCallCount = 0
    var clientID: String? = nil { didSet { clientIDSetCallCount += 1 } }

    private(set) var redirectURISetCallCount = 0
    var redirectURI: String? = nil { didSet { redirectURISetCallCount += 1 } }

    private(set) var isInstalledCallCount = 0
    var isInstalledHandler: ((UberApp, Bool) -> (Bool))?
    func isInstalled(app: UberApp, defaultIfUnregistered: Bool) -> Bool {
        isInstalledCallCount += 1
        if let isInstalledHandler = isInstalledHandler {
            return isInstalledHandler(app, defaultIfUnregistered)
        }
        return false
    }
}

class AuthenticationSessioningMock: AuthenticationSessioning {
        private var _anchor: ASPresentationAnchor!
    private var _callbackURLScheme: String!
    private var _completion: AuthCompletion!
    private var _url: URL!
    init() { }
    required init(anchor: ASPresentationAnchor, callbackURLScheme: String = "", url: URL = URL(fileURLWithPath: ""), completion: @escaping AuthCompletion) {
        self._anchor = anchor
        self._callbackURLScheme = callbackURLScheme
        self._url = url
        self._completion = completion
    }


    private(set) var startCallCount = 0
    var startHandler: (() -> ())?
    func start()  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler()
        }
        
    }
}

public class AuthProvidingMock: AuthProviding {
    public init() { }


    public private(set) var executeCallCount = 0
    public var executeHandler: ((AuthDestination, Prefill?, @escaping (Result<Client, UberAuthError>) -> ()) -> ())?
    public func execute(authDestination: AuthDestination, prefill: Prefill?, completion: @escaping (Result<Client, UberAuthError>) -> ())  {
        executeCallCount += 1
        if let executeHandler = executeHandler {
            executeHandler(authDestination, prefill, completion)
        }
        
    }

    public private(set) var handleCallCount = 0
    public var handleHandler: ((URL) -> (Bool))?
    public func handle(response url: URL) -> Bool {
        handleCallCount += 1
        if let handleHandler = handleHandler {
            return handleHandler(url)
        }
        return false
    }
}

class AuthManagingMock: AuthManaging {
    init() { }


    private(set) var loginCallCount = 0
    var loginHandler: ((AuthContext, @escaping AuthCompletion) -> ())?
    func login(context: AuthContext, completion: @escaping AuthCompletion)  {
        loginCallCount += 1
        if let loginHandler = loginHandler {
            loginHandler(context, completion)
        }
        
    }

    private(set) var handleCallCount = 0
    var handleHandler: ((URL) -> (Bool))?
    func handle(_ url: URL) -> Bool {
        handleCallCount += 1
        if let handleHandler = handleHandler {
            return handleHandler(url)
        }
        return false
    }
}

public class TokenManagingMock: TokenManaging {
    public init() { }


    public private(set) var saveTokenCallCount = 0
    public var saveTokenHandler: ((AccessToken, String, String?) -> (Bool))?
    public func saveToken(_ token: AccessToken, identifier: String, accessGroup: String?) -> Bool {
        saveTokenCallCount += 1
        if let saveTokenHandler = saveTokenHandler {
            return saveTokenHandler(token, identifier, accessGroup)
        }
        return false
    }

    public private(set) var getTokenCallCount = 0
    public var getTokenHandler: ((String, String?) -> (AccessToken?))?
    public func getToken(identifier: String, accessGroup: String?) -> AccessToken? {
        getTokenCallCount += 1
        if let getTokenHandler = getTokenHandler {
            return getTokenHandler(identifier, accessGroup)
        }
        return nil
    }

    public private(set) var deleteTokenCallCount = 0
    public var deleteTokenHandler: ((String, String?) -> (Bool))?
    public func deleteToken(identifier: String, accessGroup: String?) -> Bool {
        deleteTokenCallCount += 1
        if let deleteTokenHandler = deleteTokenHandler {
            return deleteTokenHandler(identifier, accessGroup)
        }
        return false
    }
}

public class KeychainUtilityProtocolMock: KeychainUtilityProtocol {
    public init() { }


    public private(set) var saveCallCount = 0
    public var saveHandler: ((Any, String) -> (Bool))?
    public func save<V: Encodable>(_ value: V, for key: String) -> Bool {
        saveCallCount += 1
        if let saveHandler = saveHandler {
            return saveHandler(value, key)
        }
        return false
    }

    public private(set) var getCallCount = 0
    public var getHandler: ((String) -> (Any?))?
    public func get<V: Decodable>(key: String) -> V? {
        getCallCount += 1
        if let getHandler = getHandler {
            return getHandler(key) as? V
        }
        return nil
    }

    public private(set) var deleteCallCount = 0
    public var deleteHandler: ((String) -> (Bool))?
    public func delete(key: String) -> Bool {
        deleteCallCount += 1
        if let deleteHandler = deleteHandler {
            return deleteHandler(key)
        }
        return false
    }

    public private(set) var setAccessGroupCallCount = 0
    public var setAccessGroupHandler: ((String) -> ())?
    public func setAccessGroup(_ accessGroup: String)  {
        setAccessGroupCallCount += 1
        if let setAccessGroupHandler = setAccessGroupHandler {
            setAccessGroupHandler(accessGroup)
        }
        
    }
}

